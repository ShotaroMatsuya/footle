# PHP CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-php/ for more details
#
version: 2
jobs:
  build:
    docker:
      # specify the version you desire here
      - image: circleci/php:8.0-fpm-node-browsers

      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      # - image: circleci/mysql:9.4

    working_directory: ~/repo
    branches:
      only: master
    steps:
      - checkout
      - run: |
          sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 4EB27DB2A3B88B8B
          sudo apt-get update --allow-releaseinfo-change
          sudo apt-get update
          sudo apt-get upgrade -y
          sudo apt-get install -y rsync
      # Download and cache dependencies
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "app/composer.json" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-
      - setup_remote_docker:
          version: 20.10.14
      - run:
          name: Install Snyk
          command: |
            echo Install Snyk
            curl -Lo ./snyk "https://github.com/snyk/snyk/releases/download/v1.996.0/snyk-linux"
            chmod -R +x ./snyk
            ./snyk config set api="${SNYK_AUTH_TOKEN}"
            echo Build client and backend docker images for testing...
            docker build -t shotaromatsuya/footle-nginx -f ./dockerfiles/nginx.dockerfile ./
            docker build -t shotaromatsuya/footle-php -f ./dockerfiles/php.dockerfile ./
      - run:
          name: Install PHP libraries
          command: |
            cd app/
            composer install -n --prefer-dist
      - run:
          name: Create .env
          command: |
            cd app/
            echo "YOUTUBE_API_KEY=${YOUTUBE_API_KEY}" >> .env
            echo "DB_NAME=${DB_NAME}" >> .env
            echo "DB_HOST=${DB_HOST}" >> .env
            echo "DB_USER=${DB_USER}" >> .env
            echo "DB_PASSWORD=${DB_PASSWORD}" >> .env

      - save_cache:
          paths:
            - app/vendor
          key: v1-dependencies-{{ checksum "app/composer.json" }}

      # run tests!
      # - run: vendor/phpunit/phpunit/phpunit tests/
      - run:
          name: Scan Docker image with Snyk
          command: |
            ./snyk test --severity-threshold=medium --exclude-base-image-vulns --docker shotaromatsuya/footle-nginx:latest --file=./dockerfiles/nginx.dockerfile
            ./snyk monitor --docker shotaromatsuya/footle-nginx:latest --file=./dockerfiles/nginx.dockerfile
            ./snyk test --severity-threshold=medium --exclude-base-image-vulns --docker shotaromatsuya/footle-php:latest --file=./dockerfiles/php.dockerfile
            ./snyk monitor --docker shotaromatsuya/footle-php:latest --file=./dockerfiles/php.dockerfile
      - run:
          name: Build the Docker images
          command: |
            docker build -t shotaromatsuya/footle-nginx -f dockerfiles/nginx.dockerfile ./
            docker build -t shotaromatsuya/footle-php -f dockerfiles/php.dockerfile ./
      - run:
          name: Log in to the Docker CLI
          command: echo "${DOCKER_PW}" | docker login -u "${DOCKER_ID}" --password-stdin
      - run:
          name: Take these images and push them to DockerHub
          command: |
            docker push shotaromatsuya/footle-nginx
            docker push shotaromatsuya/footle-php

      - add_ssh_keys:
          fingerprints:
            - '${KEY_FINGERPRINT}'

      - run:
          name: Start ssh-keyscan
          command: |
            ssh-keyscan -p ${DEPLOY_PORT} ${DEPLOY_SERVER} >> ~/.ssh/known_hosts
      - run:
          name: Check rsync command exists
          command: which rsync

      - deploy:
          name: Start master deploy
          command: |
            if [ "${CIRCLE_BRANCH}" == "master" ]; then  
              rsync -av --delete --rsh="ssh -p ${DEPLOY_PORT}" ./app/ ${DEPLOY_USER}@${DEPLOY_SERVER}:~/web/footle
            fi
